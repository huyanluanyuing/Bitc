/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class MiningPoolService {

  public interface Iface {

    public long mineBlock(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target) throws IllegalArgument, org.apache.thrift.TException;

    public void cancel() throws org.apache.thrift.TException;

    public void registerBE(java.lang.String host, int port, int numCores) throws IllegalArgument, org.apache.thrift.TException;

    public long mineBlockInRange(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads) throws IllegalArgument, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void mineBlock(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void cancel(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void registerBE(java.lang.String host, int port, int numCores, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mineBlockInRange(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public long mineBlock(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target) throws IllegalArgument, org.apache.thrift.TException
    {
      send_mineBlock(version, prevBlockHash, merkleRootHash, time, target);
      return recv_mineBlock();
    }

    public void send_mineBlock(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target) throws org.apache.thrift.TException
    {
      mineBlock_args args = new mineBlock_args();
      args.setVersion(version);
      args.setPrevBlockHash(prevBlockHash);
      args.setMerkleRootHash(merkleRootHash);
      args.setTime(time);
      args.setTarget(target);
      sendBase("mineBlock", args);
    }

    public long recv_mineBlock() throws IllegalArgument, org.apache.thrift.TException
    {
      mineBlock_result result = new mineBlock_result();
      receiveBase(result, "mineBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mineBlock failed: unknown result");
    }

    @Override
    public void cancel() throws org.apache.thrift.TException
    {
      send_cancel();
      recv_cancel();
    }

    public void send_cancel() throws org.apache.thrift.TException
    {
      cancel_args args = new cancel_args();
      sendBase("cancel", args);
    }

    public void recv_cancel() throws org.apache.thrift.TException
    {
      cancel_result result = new cancel_result();
      receiveBase(result, "cancel");
      return;
    }

    @Override
    public void registerBE(java.lang.String host, int port, int numCores) throws IllegalArgument, org.apache.thrift.TException
    {
      send_registerBE(host, port, numCores);
      recv_registerBE();
    }

    public void send_registerBE(java.lang.String host, int port, int numCores) throws org.apache.thrift.TException
    {
      registerBE_args args = new registerBE_args();
      args.setHost(host);
      args.setPort(port);
      args.setNumCores(numCores);
      sendBase("registerBE", args);
    }

    public void recv_registerBE() throws IllegalArgument, org.apache.thrift.TException
    {
      registerBE_result result = new registerBE_result();
      receiveBase(result, "registerBE");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    @Override
    public long mineBlockInRange(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads) throws IllegalArgument, org.apache.thrift.TException
    {
      send_mineBlockInRange(version, prevBlockHash, merkleRootHash, time, target, startNonce, endNonce, numThreads);
      return recv_mineBlockInRange();
    }

    public void send_mineBlockInRange(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads) throws org.apache.thrift.TException
    {
      mineBlockInRange_args args = new mineBlockInRange_args();
      args.setVersion(version);
      args.setPrevBlockHash(prevBlockHash);
      args.setMerkleRootHash(merkleRootHash);
      args.setTime(time);
      args.setTarget(target);
      args.setStartNonce(startNonce);
      args.setEndNonce(endNonce);
      args.setNumThreads(numThreads);
      sendBase("mineBlockInRange", args);
    }

    public long recv_mineBlockInRange() throws IllegalArgument, org.apache.thrift.TException
    {
      mineBlockInRange_result result = new mineBlockInRange_result();
      receiveBase(result, "mineBlockInRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mineBlockInRange failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void mineBlock(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mineBlock_call method_call = new mineBlock_call(version, prevBlockHash, merkleRootHash, time, target, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mineBlock_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private int version;
      private java.nio.ByteBuffer prevBlockHash;
      private java.nio.ByteBuffer merkleRootHash;
      private long time;
      private long target;
      public mineBlock_call(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.version = version;
        this.prevBlockHash = prevBlockHash;
        this.merkleRootHash = merkleRootHash;
        this.time = time;
        this.target = target;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mineBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mineBlock_args args = new mineBlock_args();
        args.setVersion(version);
        args.setPrevBlockHash(prevBlockHash);
        args.setMerkleRootHash(merkleRootHash);
        args.setTime(time);
        args.setTarget(target);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Long getResult() throws IllegalArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mineBlock();
      }
    }

    @Override
    public void cancel(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancel_call method_call = new cancel_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public cancel_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancel_args args = new cancel_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancel();
        return null;
      }
    }

    @Override
    public void registerBE(java.lang.String host, int port, int numCores, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerBE_call method_call = new registerBE_call(host, port, numCores, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerBE_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String host;
      private int port;
      private int numCores;
      public registerBE_call(java.lang.String host, int port, int numCores, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.host = host;
        this.port = port;
        this.numCores = numCores;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerBE", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerBE_args args = new registerBE_args();
        args.setHost(host);
        args.setPort(port);
        args.setNumCores(numCores);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws IllegalArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerBE();
        return null;
      }
    }

    @Override
    public void mineBlockInRange(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mineBlockInRange_call method_call = new mineBlockInRange_call(version, prevBlockHash, merkleRootHash, time, target, startNonce, endNonce, numThreads, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mineBlockInRange_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private int version;
      private java.nio.ByteBuffer prevBlockHash;
      private java.nio.ByteBuffer merkleRootHash;
      private long time;
      private long target;
      private long startNonce;
      private long endNonce;
      private int numThreads;
      public mineBlockInRange_call(int version, java.nio.ByteBuffer prevBlockHash, java.nio.ByteBuffer merkleRootHash, long time, long target, long startNonce, long endNonce, int numThreads, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.version = version;
        this.prevBlockHash = prevBlockHash;
        this.merkleRootHash = merkleRootHash;
        this.time = time;
        this.target = target;
        this.startNonce = startNonce;
        this.endNonce = endNonce;
        this.numThreads = numThreads;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mineBlockInRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mineBlockInRange_args args = new mineBlockInRange_args();
        args.setVersion(version);
        args.setPrevBlockHash(prevBlockHash);
        args.setMerkleRootHash(merkleRootHash);
        args.setTime(time);
        args.setTarget(target);
        args.setStartNonce(startNonce);
        args.setEndNonce(endNonce);
        args.setNumThreads(numThreads);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Long getResult() throws IllegalArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mineBlockInRange();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("mineBlock", new mineBlock());
      processMap.put("cancel", new cancel());
      processMap.put("registerBE", new registerBE());
      processMap.put("mineBlockInRange", new mineBlockInRange());
      return processMap;
    }

    public static class mineBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mineBlock_args, mineBlock_result> {
      public mineBlock() {
        super("mineBlock");
      }

      @Override
      public mineBlock_args getEmptyArgsInstance() {
        return new mineBlock_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public mineBlock_result getEmptyResultInstance() {
        return new mineBlock_result();
      }

      @Override
      public mineBlock_result getResult(I iface, mineBlock_args args) throws org.apache.thrift.TException {
        mineBlock_result result = getEmptyResultInstance();
        try {
          result.success = iface.mineBlock(args.version, args.prevBlockHash, args.merkleRootHash, args.time, args.target);
          result.setSuccessIsSet(true);
        } catch (IllegalArgument e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancel_args, cancel_result> {
      public cancel() {
        super("cancel");
      }

      @Override
      public cancel_args getEmptyArgsInstance() {
        return new cancel_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public cancel_result getEmptyResultInstance() {
        return new cancel_result();
      }

      @Override
      public cancel_result getResult(I iface, cancel_args args) throws org.apache.thrift.TException {
        cancel_result result = getEmptyResultInstance();
        iface.cancel();
        return result;
      }
    }

    public static class registerBE<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerBE_args, registerBE_result> {
      public registerBE() {
        super("registerBE");
      }

      @Override
      public registerBE_args getEmptyArgsInstance() {
        return new registerBE_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public registerBE_result getEmptyResultInstance() {
        return new registerBE_result();
      }

      @Override
      public registerBE_result getResult(I iface, registerBE_args args) throws org.apache.thrift.TException {
        registerBE_result result = getEmptyResultInstance();
        try {
          iface.registerBE(args.host, args.port, args.numCores);
        } catch (IllegalArgument e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class mineBlockInRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mineBlockInRange_args, mineBlockInRange_result> {
      public mineBlockInRange() {
        super("mineBlockInRange");
      }

      @Override
      public mineBlockInRange_args getEmptyArgsInstance() {
        return new mineBlockInRange_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public mineBlockInRange_result getEmptyResultInstance() {
        return new mineBlockInRange_result();
      }

      @Override
      public mineBlockInRange_result getResult(I iface, mineBlockInRange_args args) throws org.apache.thrift.TException {
        mineBlockInRange_result result = getEmptyResultInstance();
        try {
          result.success = iface.mineBlockInRange(args.version, args.prevBlockHash, args.merkleRootHash, args.time, args.target, args.startNonce, args.endNonce, args.numThreads);
          result.setSuccessIsSet(true);
        } catch (IllegalArgument e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("mineBlock", new mineBlock());
      processMap.put("cancel", new cancel());
      processMap.put("registerBE", new registerBE());
      processMap.put("mineBlockInRange", new mineBlockInRange());
      return processMap;
    }

    public static class mineBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mineBlock_args, java.lang.Long, mineBlock_result> {
      public mineBlock() {
        super("mineBlock");
      }

      @Override
      public mineBlock_result getEmptyResultInstance() {
        return new mineBlock_result();
      }

      @Override
      public mineBlock_args getEmptyArgsInstance() {
        return new mineBlock_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          @Override
          public void onComplete(java.lang.Long o) {
            mineBlock_result result = new mineBlock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mineBlock_result result = new mineBlock_result();
            if (e instanceof IllegalArgument) {
              result.e = (IllegalArgument) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, mineBlock_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.mineBlock(args.version, args.prevBlockHash, args.merkleRootHash, args.time, args.target,resultHandler);
      }
    }

    public static class cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancel_args, Void, cancel_result> {
      public cancel() {
        super("cancel");
      }

      @Override
      public cancel_result getEmptyResultInstance() {
        return new cancel_result();
      }

      @Override
      public cancel_args getEmptyArgsInstance() {
        return new cancel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            cancel_result result = new cancel_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancel_result result = new cancel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.cancel(resultHandler);
      }
    }

    public static class registerBE<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerBE_args, Void, registerBE_result> {
      public registerBE() {
        super("registerBE");
      }

      @Override
      public registerBE_result getEmptyResultInstance() {
        return new registerBE_result();
      }

      @Override
      public registerBE_args getEmptyArgsInstance() {
        return new registerBE_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            registerBE_result result = new registerBE_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerBE_result result = new registerBE_result();
            if (e instanceof IllegalArgument) {
              result.e = (IllegalArgument) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, registerBE_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.registerBE(args.host, args.port, args.numCores,resultHandler);
      }
    }

    public static class mineBlockInRange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mineBlockInRange_args, java.lang.Long, mineBlockInRange_result> {
      public mineBlockInRange() {
        super("mineBlockInRange");
      }

      @Override
      public mineBlockInRange_result getEmptyResultInstance() {
        return new mineBlockInRange_result();
      }

      @Override
      public mineBlockInRange_args getEmptyArgsInstance() {
        return new mineBlockInRange_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          @Override
          public void onComplete(java.lang.Long o) {
            mineBlockInRange_result result = new mineBlockInRange_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mineBlockInRange_result result = new mineBlockInRange_result();
            if (e instanceof IllegalArgument) {
              result.e = (IllegalArgument) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, mineBlockInRange_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.mineBlockInRange(args.version, args.prevBlockHash, args.merkleRootHash, args.time, args.target, args.startNonce, args.endNonce, args.numThreads,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class mineBlock_args implements org.apache.thrift.TBase<mineBlock_args, mineBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<mineBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mineBlock_args");

    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_BLOCK_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("prevBlockHash", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MERKLE_ROOT_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("merkleRootHash", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mineBlock_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mineBlock_argsTupleSchemeFactory();

    public int version; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer prevBlockHash; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer merkleRootHash; // required
    public long time; // required
    public long target; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERSION((short)1, "version"),
      PREV_BLOCK_HASH((short)2, "prevBlockHash"),
      MERKLE_ROOT_HASH((short)3, "merkleRootHash"),
      TIME((short)4, "time"),
      TARGET((short)5, "target");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERSION
            return VERSION;
          case 2: // PREV_BLOCK_HASH
            return PREV_BLOCK_HASH;
          case 3: // MERKLE_ROOT_HASH
            return MERKLE_ROOT_HASH;
          case 4: // TIME
            return TIME;
          case 5: // TARGET
            return TARGET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private static final int __TARGET_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_BLOCK_HASH, new org.apache.thrift.meta_data.FieldMetaData("prevBlockHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.MERKLE_ROOT_HASH, new org.apache.thrift.meta_data.FieldMetaData("merkleRootHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mineBlock_args.class, metaDataMap);
    }

    public mineBlock_args() {
    }

    public mineBlock_args(
      int version,
      java.nio.ByteBuffer prevBlockHash,
      java.nio.ByteBuffer merkleRootHash,
      long time,
      long target)
    {
      this();
      this.version = version;
      setVersionIsSet(true);
      this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
      this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
      this.time = time;
      setTimeIsSet(true);
      this.target = target;
      setTargetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mineBlock_args(mineBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.version = other.version;
      if (other.isSetPrevBlockHash()) {
        this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(other.prevBlockHash);
      }
      if (other.isSetMerkleRootHash()) {
        this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(other.merkleRootHash);
      }
      this.time = other.time;
      this.target = other.target;
    }

    @Override
    public mineBlock_args deepCopy() {
      return new mineBlock_args(this);
    }

    @Override
    public void clear() {
      setVersionIsSet(false);
      this.version = 0;
      this.prevBlockHash = null;
      this.merkleRootHash = null;
      setTimeIsSet(false);
      this.time = 0;
      setTargetIsSet(false);
      this.target = 0;
    }

    public int getVersion() {
      return this.version;
    }

    public mineBlock_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public byte[] getPrevBlockHash() {
      setPrevBlockHash(org.apache.thrift.TBaseHelper.rightSize(prevBlockHash));
      return prevBlockHash == null ? null : prevBlockHash.array();
    }

    public java.nio.ByteBuffer bufferForPrevBlockHash() {
      return org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
    }

    public mineBlock_args setPrevBlockHash(byte[] prevBlockHash) {
      this.prevBlockHash = prevBlockHash == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(prevBlockHash.clone());
      return this;
    }

    public mineBlock_args setPrevBlockHash(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer prevBlockHash) {
      this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
      return this;
    }

    public void unsetPrevBlockHash() {
      this.prevBlockHash = null;
    }

    /** Returns true if field prevBlockHash is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevBlockHash() {
      return this.prevBlockHash != null;
    }

    public void setPrevBlockHashIsSet(boolean value) {
      if (!value) {
        this.prevBlockHash = null;
      }
    }

    public byte[] getMerkleRootHash() {
      setMerkleRootHash(org.apache.thrift.TBaseHelper.rightSize(merkleRootHash));
      return merkleRootHash == null ? null : merkleRootHash.array();
    }

    public java.nio.ByteBuffer bufferForMerkleRootHash() {
      return org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
    }

    public mineBlock_args setMerkleRootHash(byte[] merkleRootHash) {
      this.merkleRootHash = merkleRootHash == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(merkleRootHash.clone());
      return this;
    }

    public mineBlock_args setMerkleRootHash(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer merkleRootHash) {
      this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
      return this;
    }

    public void unsetMerkleRootHash() {
      this.merkleRootHash = null;
    }

    /** Returns true if field merkleRootHash is set (has been assigned a value) and false otherwise */
    public boolean isSetMerkleRootHash() {
      return this.merkleRootHash != null;
    }

    public void setMerkleRootHashIsSet(boolean value) {
      if (!value) {
        this.merkleRootHash = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public mineBlock_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public long getTarget() {
      return this.target;
    }

    public mineBlock_args setTarget(long target) {
      this.target = target;
      setTargetIsSet(true);
      return this;
    }

    public void unsetTarget() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
    }

    /** Returns true if field target is set (has been assigned a value) and false otherwise */
    public boolean isSetTarget() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
    }

    public void setTargetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.Integer)value);
        }
        break;

      case PREV_BLOCK_HASH:
        if (value == null) {
          unsetPrevBlockHash();
        } else {
          if (value instanceof byte[]) {
            setPrevBlockHash((byte[])value);
          } else {
            setPrevBlockHash((java.nio.ByteBuffer)value);
          }
        }
        break;

      case MERKLE_ROOT_HASH:
        if (value == null) {
          unsetMerkleRootHash();
        } else {
          if (value instanceof byte[]) {
            setMerkleRootHash((byte[])value);
          } else {
            setMerkleRootHash((java.nio.ByteBuffer)value);
          }
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.Long)value);
        }
        break;

      case TARGET:
        if (value == null) {
          unsetTarget();
        } else {
          setTarget((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VERSION:
        return getVersion();

      case PREV_BLOCK_HASH:
        return getPrevBlockHash();

      case MERKLE_ROOT_HASH:
        return getMerkleRootHash();

      case TIME:
        return getTime();

      case TARGET:
        return getTarget();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VERSION:
        return isSetVersion();
      case PREV_BLOCK_HASH:
        return isSetPrevBlockHash();
      case MERKLE_ROOT_HASH:
        return isSetMerkleRootHash();
      case TIME:
        return isSetTime();
      case TARGET:
        return isSetTarget();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mineBlock_args)
        return this.equals((mineBlock_args)that);
      return false;
    }

    public boolean equals(mineBlock_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_prevBlockHash = true && this.isSetPrevBlockHash();
      boolean that_present_prevBlockHash = true && that.isSetPrevBlockHash();
      if (this_present_prevBlockHash || that_present_prevBlockHash) {
        if (!(this_present_prevBlockHash && that_present_prevBlockHash))
          return false;
        if (!this.prevBlockHash.equals(that.prevBlockHash))
          return false;
      }

      boolean this_present_merkleRootHash = true && this.isSetMerkleRootHash();
      boolean that_present_merkleRootHash = true && that.isSetMerkleRootHash();
      if (this_present_merkleRootHash || that_present_merkleRootHash) {
        if (!(this_present_merkleRootHash && that_present_merkleRootHash))
          return false;
        if (!this.merkleRootHash.equals(that.merkleRootHash))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_target = true;
      boolean that_present_target = true;
      if (this_present_target || that_present_target) {
        if (!(this_present_target && that_present_target))
          return false;
        if (this.target != that.target)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + version;

      hashCode = hashCode * 8191 + ((isSetPrevBlockHash()) ? 131071 : 524287);
      if (isSetPrevBlockHash())
        hashCode = hashCode * 8191 + prevBlockHash.hashCode();

      hashCode = hashCode * 8191 + ((isSetMerkleRootHash()) ? 131071 : 524287);
      if (isSetMerkleRootHash())
        hashCode = hashCode * 8191 + merkleRootHash.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(target);

      return hashCode;
    }

    @Override
    public int compareTo(mineBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPrevBlockHash(), other.isSetPrevBlockHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevBlockHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevBlockHash, other.prevBlockHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMerkleRootHash(), other.isSetMerkleRootHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerkleRootHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merkleRootHash, other.merkleRootHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTime(), other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTarget(), other.isSetTarget());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarget()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mineBlock_args(");
      boolean first = true;

      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevBlockHash:");
      if (this.prevBlockHash == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.prevBlockHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merkleRootHash:");
      if (this.merkleRootHash == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.merkleRootHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("target:");
      sb.append(this.target);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mineBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlock_argsStandardScheme getScheme() {
        return new mineBlock_argsStandardScheme();
      }
    }

    private static class mineBlock_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mineBlock_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, mineBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_BLOCK_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prevBlockHash = iprot.readBinary();
                struct.setPrevBlockHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MERKLE_ROOT_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merkleRootHash = iprot.readBinary();
                struct.setMerkleRootHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TARGET
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.target = iprot.readI64();
                struct.setTargetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, mineBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.prevBlockHash != null) {
          oprot.writeFieldBegin(PREV_BLOCK_HASH_FIELD_DESC);
          oprot.writeBinary(struct.prevBlockHash);
          oprot.writeFieldEnd();
        }
        if (struct.merkleRootHash != null) {
          oprot.writeFieldBegin(MERKLE_ROOT_HASH_FIELD_DESC);
          oprot.writeBinary(struct.merkleRootHash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI64(struct.target);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mineBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlock_argsTupleScheme getScheme() {
        return new mineBlock_argsTupleScheme();
      }
    }

    private static class mineBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mineBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mineBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVersion()) {
          optionals.set(0);
        }
        if (struct.isSetPrevBlockHash()) {
          optionals.set(1);
        }
        if (struct.isSetMerkleRootHash()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        if (struct.isSetTarget()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetPrevBlockHash()) {
          oprot.writeBinary(struct.prevBlockHash);
        }
        if (struct.isSetMerkleRootHash()) {
          oprot.writeBinary(struct.merkleRootHash);
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
        if (struct.isSetTarget()) {
          oprot.writeI64(struct.target);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mineBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prevBlockHash = iprot.readBinary();
          struct.setPrevBlockHashIsSet(true);
        }
        if (incoming.get(2)) {
          struct.merkleRootHash = iprot.readBinary();
          struct.setMerkleRootHashIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.target = iprot.readI64();
          struct.setTargetIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class mineBlock_result implements org.apache.thrift.TBase<mineBlock_result, mineBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<mineBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mineBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mineBlock_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mineBlock_resultTupleSchemeFactory();

    public long success; // required
    public @org.apache.thrift.annotation.Nullable IllegalArgument e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IllegalArgument.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mineBlock_result.class, metaDataMap);
    }

    public mineBlock_result() {
    }

    public mineBlock_result(
      long success,
      IllegalArgument e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mineBlock_result(mineBlock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new IllegalArgument(other.e);
      }
    }

    @Override
    public mineBlock_result deepCopy() {
      return new mineBlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public mineBlock_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public IllegalArgument getE() {
      return this.e;
    }

    public mineBlock_result setE(@org.apache.thrift.annotation.Nullable IllegalArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((IllegalArgument)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mineBlock_result)
        return this.equals((mineBlock_result)that);
      return false;
    }

    public boolean equals(mineBlock_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mineBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mineBlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mineBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlock_resultStandardScheme getScheme() {
        return new mineBlock_resultStandardScheme();
      }
    }

    private static class mineBlock_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mineBlock_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, mineBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new IllegalArgument();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, mineBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mineBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlock_resultTupleScheme getScheme() {
        return new mineBlock_resultTupleScheme();
      }
    }

    private static class mineBlock_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mineBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mineBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mineBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new IllegalArgument();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class cancel_args implements org.apache.thrift.TBase<cancel_args, cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancel_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_args.class, metaDataMap);
    }

    public cancel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_args(cancel_args other) {
    }

    @Override
    public cancel_args deepCopy() {
      return new cancel_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof cancel_args)
        return this.equals((cancel_args)that);
      return false;
    }

    public boolean equals(cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancel_argsStandardScheme getScheme() {
        return new cancel_argsStandardScheme();
      }
    }

    private static class cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancel_argsTupleScheme getScheme() {
        return new cancel_argsTupleScheme();
      }
    }

    private static class cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class cancel_result implements org.apache.thrift.TBase<cancel_result, cancel_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancel_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_result.class, metaDataMap);
    }

    public cancel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_result(cancel_result other) {
    }

    @Override
    public cancel_result deepCopy() {
      return new cancel_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof cancel_result)
        return this.equals((cancel_result)that);
      return false;
    }

    public boolean equals(cancel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancel_resultStandardScheme getScheme() {
        return new cancel_resultStandardScheme();
      }
    }

    private static class cancel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancel_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancel_resultTupleScheme getScheme() {
        return new cancel_resultTupleScheme();
      }
    }

    private static class cancel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class registerBE_args implements org.apache.thrift.TBase<registerBE_args, registerBE_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerBE_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerBE_args");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("numCores", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerBE_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerBE_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
    public int port; // required
    public int numCores; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST((short)1, "host"),
      PORT((short)2, "port"),
      NUM_CORES((short)3, "numCores");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST
            return HOST;
          case 2: // PORT
            return PORT;
          case 3: // NUM_CORES
            return NUM_CORES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __NUMCORES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_CORES, new org.apache.thrift.meta_data.FieldMetaData("numCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerBE_args.class, metaDataMap);
    }

    public registerBE_args() {
    }

    public registerBE_args(
      java.lang.String host,
      int port,
      int numCores)
    {
      this();
      this.host = host;
      this.port = port;
      setPortIsSet(true);
      this.numCores = numCores;
      setNumCoresIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBE_args(registerBE_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHost()) {
        this.host = other.host;
      }
      this.port = other.port;
      this.numCores = other.numCores;
    }

    @Override
    public registerBE_args deepCopy() {
      return new registerBE_args(this);
    }

    @Override
    public void clear() {
      this.host = null;
      setPortIsSet(false);
      this.port = 0;
      setNumCoresIsSet(false);
      this.numCores = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHost() {
      return this.host;
    }

    public registerBE_args setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public registerBE_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getNumCores() {
      return this.numCores;
    }

    public registerBE_args setNumCores(int numCores) {
      this.numCores = numCores;
      setNumCoresIsSet(true);
      return this;
    }

    public void unsetNumCores() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCORES_ISSET_ID);
    }

    /** Returns true if field numCores is set (has been assigned a value) and false otherwise */
    public boolean isSetNumCores() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCORES_ISSET_ID);
    }

    public void setNumCoresIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCORES_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case NUM_CORES:
        if (value == null) {
          unsetNumCores();
        } else {
          setNumCores((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST:
        return getHost();

      case PORT:
        return getPort();

      case NUM_CORES:
        return getNumCores();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST:
        return isSetHost();
      case PORT:
        return isSetPort();
      case NUM_CORES:
        return isSetNumCores();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof registerBE_args)
        return this.equals((registerBE_args)that);
      return false;
    }

    public boolean equals(registerBE_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_numCores = true;
      boolean that_present_numCores = true;
      if (this_present_numCores || that_present_numCores) {
        if (!(this_present_numCores && that_present_numCores))
          return false;
        if (this.numCores != that.numCores)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + numCores;

      return hashCode;
    }

    @Override
    public int compareTo(registerBE_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNumCores(), other.isSetNumCores());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumCores()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCores, other.numCores);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerBE_args(");
      boolean first = true;

      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numCores:");
      sb.append(this.numCores);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerBE_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public registerBE_argsStandardScheme getScheme() {
        return new registerBE_argsStandardScheme();
      }
    }

    private static class registerBE_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerBE_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, registerBE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_CORES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numCores = iprot.readI32();
                struct.setNumCoresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, registerBE_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_CORES_FIELD_DESC);
        oprot.writeI32(struct.numCores);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerBE_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public registerBE_argsTupleScheme getScheme() {
        return new registerBE_argsTupleScheme();
      }
    }

    private static class registerBE_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerBE_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerBE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHost()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetNumCores()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetNumCores()) {
          oprot.writeI32(struct.numCores);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerBE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numCores = iprot.readI32();
          struct.setNumCoresIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class registerBE_result implements org.apache.thrift.TBase<registerBE_result, registerBE_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerBE_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerBE_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerBE_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerBE_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable IllegalArgument e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IllegalArgument.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerBE_result.class, metaDataMap);
    }

    public registerBE_result() {
    }

    public registerBE_result(
      IllegalArgument e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBE_result(registerBE_result other) {
      if (other.isSetE()) {
        this.e = new IllegalArgument(other.e);
      }
    }

    @Override
    public registerBE_result deepCopy() {
      return new registerBE_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public IllegalArgument getE() {
      return this.e;
    }

    public registerBE_result setE(@org.apache.thrift.annotation.Nullable IllegalArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((IllegalArgument)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof registerBE_result)
        return this.equals((registerBE_result)that);
      return false;
    }

    public boolean equals(registerBE_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerBE_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerBE_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerBE_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public registerBE_resultStandardScheme getScheme() {
        return new registerBE_resultStandardScheme();
      }
    }

    private static class registerBE_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerBE_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, registerBE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new IllegalArgument();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, registerBE_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerBE_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public registerBE_resultTupleScheme getScheme() {
        return new registerBE_resultTupleScheme();
      }
    }

    private static class registerBE_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerBE_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerBE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerBE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new IllegalArgument();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class mineBlockInRange_args implements org.apache.thrift.TBase<mineBlockInRange_args, mineBlockInRange_args._Fields>, java.io.Serializable, Cloneable, Comparable<mineBlockInRange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mineBlockInRange_args");

    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_BLOCK_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("prevBlockHash", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MERKLE_ROOT_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("merkleRootHash", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField START_NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("startNonce", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField END_NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("endNonce", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField NUM_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("numThreads", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mineBlockInRange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mineBlockInRange_argsTupleSchemeFactory();

    public int version; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer prevBlockHash; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer merkleRootHash; // required
    public long time; // required
    public long target; // required
    public long startNonce; // required
    public long endNonce; // required
    public int numThreads; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERSION((short)1, "version"),
      PREV_BLOCK_HASH((short)2, "prevBlockHash"),
      MERKLE_ROOT_HASH((short)3, "merkleRootHash"),
      TIME((short)4, "time"),
      TARGET((short)5, "target"),
      START_NONCE((short)6, "startNonce"),
      END_NONCE((short)7, "endNonce"),
      NUM_THREADS((short)8, "numThreads");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERSION
            return VERSION;
          case 2: // PREV_BLOCK_HASH
            return PREV_BLOCK_HASH;
          case 3: // MERKLE_ROOT_HASH
            return MERKLE_ROOT_HASH;
          case 4: // TIME
            return TIME;
          case 5: // TARGET
            return TARGET;
          case 6: // START_NONCE
            return START_NONCE;
          case 7: // END_NONCE
            return END_NONCE;
          case 8: // NUM_THREADS
            return NUM_THREADS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private static final int __TARGET_ISSET_ID = 2;
    private static final int __STARTNONCE_ISSET_ID = 3;
    private static final int __ENDNONCE_ISSET_ID = 4;
    private static final int __NUMTHREADS_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_BLOCK_HASH, new org.apache.thrift.meta_data.FieldMetaData("prevBlockHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.MERKLE_ROOT_HASH, new org.apache.thrift.meta_data.FieldMetaData("merkleRootHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_NONCE, new org.apache.thrift.meta_data.FieldMetaData("startNonce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_NONCE, new org.apache.thrift.meta_data.FieldMetaData("endNonce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_THREADS, new org.apache.thrift.meta_data.FieldMetaData("numThreads", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mineBlockInRange_args.class, metaDataMap);
    }

    public mineBlockInRange_args() {
    }

    public mineBlockInRange_args(
      int version,
      java.nio.ByteBuffer prevBlockHash,
      java.nio.ByteBuffer merkleRootHash,
      long time,
      long target,
      long startNonce,
      long endNonce,
      int numThreads)
    {
      this();
      this.version = version;
      setVersionIsSet(true);
      this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
      this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
      this.time = time;
      setTimeIsSet(true);
      this.target = target;
      setTargetIsSet(true);
      this.startNonce = startNonce;
      setStartNonceIsSet(true);
      this.endNonce = endNonce;
      setEndNonceIsSet(true);
      this.numThreads = numThreads;
      setNumThreadsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mineBlockInRange_args(mineBlockInRange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.version = other.version;
      if (other.isSetPrevBlockHash()) {
        this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(other.prevBlockHash);
      }
      if (other.isSetMerkleRootHash()) {
        this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(other.merkleRootHash);
      }
      this.time = other.time;
      this.target = other.target;
      this.startNonce = other.startNonce;
      this.endNonce = other.endNonce;
      this.numThreads = other.numThreads;
    }

    @Override
    public mineBlockInRange_args deepCopy() {
      return new mineBlockInRange_args(this);
    }

    @Override
    public void clear() {
      setVersionIsSet(false);
      this.version = 0;
      this.prevBlockHash = null;
      this.merkleRootHash = null;
      setTimeIsSet(false);
      this.time = 0;
      setTargetIsSet(false);
      this.target = 0;
      setStartNonceIsSet(false);
      this.startNonce = 0;
      setEndNonceIsSet(false);
      this.endNonce = 0;
      setNumThreadsIsSet(false);
      this.numThreads = 0;
    }

    public int getVersion() {
      return this.version;
    }

    public mineBlockInRange_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public byte[] getPrevBlockHash() {
      setPrevBlockHash(org.apache.thrift.TBaseHelper.rightSize(prevBlockHash));
      return prevBlockHash == null ? null : prevBlockHash.array();
    }

    public java.nio.ByteBuffer bufferForPrevBlockHash() {
      return org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
    }

    public mineBlockInRange_args setPrevBlockHash(byte[] prevBlockHash) {
      this.prevBlockHash = prevBlockHash == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(prevBlockHash.clone());
      return this;
    }

    public mineBlockInRange_args setPrevBlockHash(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer prevBlockHash) {
      this.prevBlockHash = org.apache.thrift.TBaseHelper.copyBinary(prevBlockHash);
      return this;
    }

    public void unsetPrevBlockHash() {
      this.prevBlockHash = null;
    }

    /** Returns true if field prevBlockHash is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevBlockHash() {
      return this.prevBlockHash != null;
    }

    public void setPrevBlockHashIsSet(boolean value) {
      if (!value) {
        this.prevBlockHash = null;
      }
    }

    public byte[] getMerkleRootHash() {
      setMerkleRootHash(org.apache.thrift.TBaseHelper.rightSize(merkleRootHash));
      return merkleRootHash == null ? null : merkleRootHash.array();
    }

    public java.nio.ByteBuffer bufferForMerkleRootHash() {
      return org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
    }

    public mineBlockInRange_args setMerkleRootHash(byte[] merkleRootHash) {
      this.merkleRootHash = merkleRootHash == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(merkleRootHash.clone());
      return this;
    }

    public mineBlockInRange_args setMerkleRootHash(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer merkleRootHash) {
      this.merkleRootHash = org.apache.thrift.TBaseHelper.copyBinary(merkleRootHash);
      return this;
    }

    public void unsetMerkleRootHash() {
      this.merkleRootHash = null;
    }

    /** Returns true if field merkleRootHash is set (has been assigned a value) and false otherwise */
    public boolean isSetMerkleRootHash() {
      return this.merkleRootHash != null;
    }

    public void setMerkleRootHashIsSet(boolean value) {
      if (!value) {
        this.merkleRootHash = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public mineBlockInRange_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public long getTarget() {
      return this.target;
    }

    public mineBlockInRange_args setTarget(long target) {
      this.target = target;
      setTargetIsSet(true);
      return this;
    }

    public void unsetTarget() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
    }

    /** Returns true if field target is set (has been assigned a value) and false otherwise */
    public boolean isSetTarget() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
    }

    public void setTargetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
    }

    public long getStartNonce() {
      return this.startNonce;
    }

    public mineBlockInRange_args setStartNonce(long startNonce) {
      this.startNonce = startNonce;
      setStartNonceIsSet(true);
      return this;
    }

    public void unsetStartNonce() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTNONCE_ISSET_ID);
    }

    /** Returns true if field startNonce is set (has been assigned a value) and false otherwise */
    public boolean isSetStartNonce() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTNONCE_ISSET_ID);
    }

    public void setStartNonceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTNONCE_ISSET_ID, value);
    }

    public long getEndNonce() {
      return this.endNonce;
    }

    public mineBlockInRange_args setEndNonce(long endNonce) {
      this.endNonce = endNonce;
      setEndNonceIsSet(true);
      return this;
    }

    public void unsetEndNonce() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDNONCE_ISSET_ID);
    }

    /** Returns true if field endNonce is set (has been assigned a value) and false otherwise */
    public boolean isSetEndNonce() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDNONCE_ISSET_ID);
    }

    public void setEndNonceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDNONCE_ISSET_ID, value);
    }

    public int getNumThreads() {
      return this.numThreads;
    }

    public mineBlockInRange_args setNumThreads(int numThreads) {
      this.numThreads = numThreads;
      setNumThreadsIsSet(true);
      return this;
    }

    public void unsetNumThreads() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMTHREADS_ISSET_ID);
    }

    /** Returns true if field numThreads is set (has been assigned a value) and false otherwise */
    public boolean isSetNumThreads() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMTHREADS_ISSET_ID);
    }

    public void setNumThreadsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMTHREADS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.Integer)value);
        }
        break;

      case PREV_BLOCK_HASH:
        if (value == null) {
          unsetPrevBlockHash();
        } else {
          if (value instanceof byte[]) {
            setPrevBlockHash((byte[])value);
          } else {
            setPrevBlockHash((java.nio.ByteBuffer)value);
          }
        }
        break;

      case MERKLE_ROOT_HASH:
        if (value == null) {
          unsetMerkleRootHash();
        } else {
          if (value instanceof byte[]) {
            setMerkleRootHash((byte[])value);
          } else {
            setMerkleRootHash((java.nio.ByteBuffer)value);
          }
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.Long)value);
        }
        break;

      case TARGET:
        if (value == null) {
          unsetTarget();
        } else {
          setTarget((java.lang.Long)value);
        }
        break;

      case START_NONCE:
        if (value == null) {
          unsetStartNonce();
        } else {
          setStartNonce((java.lang.Long)value);
        }
        break;

      case END_NONCE:
        if (value == null) {
          unsetEndNonce();
        } else {
          setEndNonce((java.lang.Long)value);
        }
        break;

      case NUM_THREADS:
        if (value == null) {
          unsetNumThreads();
        } else {
          setNumThreads((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VERSION:
        return getVersion();

      case PREV_BLOCK_HASH:
        return getPrevBlockHash();

      case MERKLE_ROOT_HASH:
        return getMerkleRootHash();

      case TIME:
        return getTime();

      case TARGET:
        return getTarget();

      case START_NONCE:
        return getStartNonce();

      case END_NONCE:
        return getEndNonce();

      case NUM_THREADS:
        return getNumThreads();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VERSION:
        return isSetVersion();
      case PREV_BLOCK_HASH:
        return isSetPrevBlockHash();
      case MERKLE_ROOT_HASH:
        return isSetMerkleRootHash();
      case TIME:
        return isSetTime();
      case TARGET:
        return isSetTarget();
      case START_NONCE:
        return isSetStartNonce();
      case END_NONCE:
        return isSetEndNonce();
      case NUM_THREADS:
        return isSetNumThreads();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mineBlockInRange_args)
        return this.equals((mineBlockInRange_args)that);
      return false;
    }

    public boolean equals(mineBlockInRange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_prevBlockHash = true && this.isSetPrevBlockHash();
      boolean that_present_prevBlockHash = true && that.isSetPrevBlockHash();
      if (this_present_prevBlockHash || that_present_prevBlockHash) {
        if (!(this_present_prevBlockHash && that_present_prevBlockHash))
          return false;
        if (!this.prevBlockHash.equals(that.prevBlockHash))
          return false;
      }

      boolean this_present_merkleRootHash = true && this.isSetMerkleRootHash();
      boolean that_present_merkleRootHash = true && that.isSetMerkleRootHash();
      if (this_present_merkleRootHash || that_present_merkleRootHash) {
        if (!(this_present_merkleRootHash && that_present_merkleRootHash))
          return false;
        if (!this.merkleRootHash.equals(that.merkleRootHash))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_target = true;
      boolean that_present_target = true;
      if (this_present_target || that_present_target) {
        if (!(this_present_target && that_present_target))
          return false;
        if (this.target != that.target)
          return false;
      }

      boolean this_present_startNonce = true;
      boolean that_present_startNonce = true;
      if (this_present_startNonce || that_present_startNonce) {
        if (!(this_present_startNonce && that_present_startNonce))
          return false;
        if (this.startNonce != that.startNonce)
          return false;
      }

      boolean this_present_endNonce = true;
      boolean that_present_endNonce = true;
      if (this_present_endNonce || that_present_endNonce) {
        if (!(this_present_endNonce && that_present_endNonce))
          return false;
        if (this.endNonce != that.endNonce)
          return false;
      }

      boolean this_present_numThreads = true;
      boolean that_present_numThreads = true;
      if (this_present_numThreads || that_present_numThreads) {
        if (!(this_present_numThreads && that_present_numThreads))
          return false;
        if (this.numThreads != that.numThreads)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + version;

      hashCode = hashCode * 8191 + ((isSetPrevBlockHash()) ? 131071 : 524287);
      if (isSetPrevBlockHash())
        hashCode = hashCode * 8191 + prevBlockHash.hashCode();

      hashCode = hashCode * 8191 + ((isSetMerkleRootHash()) ? 131071 : 524287);
      if (isSetMerkleRootHash())
        hashCode = hashCode * 8191 + merkleRootHash.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(target);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startNonce);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endNonce);

      hashCode = hashCode * 8191 + numThreads;

      return hashCode;
    }

    @Override
    public int compareTo(mineBlockInRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPrevBlockHash(), other.isSetPrevBlockHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevBlockHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevBlockHash, other.prevBlockHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMerkleRootHash(), other.isSetMerkleRootHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerkleRootHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merkleRootHash, other.merkleRootHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTime(), other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTarget(), other.isSetTarget());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarget()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStartNonce(), other.isSetStartNonce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartNonce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startNonce, other.startNonce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEndNonce(), other.isSetEndNonce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndNonce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endNonce, other.endNonce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNumThreads(), other.isSetNumThreads());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumThreads()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numThreads, other.numThreads);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mineBlockInRange_args(");
      boolean first = true;

      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevBlockHash:");
      if (this.prevBlockHash == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.prevBlockHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merkleRootHash:");
      if (this.merkleRootHash == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.merkleRootHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("target:");
      sb.append(this.target);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startNonce:");
      sb.append(this.startNonce);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endNonce:");
      sb.append(this.endNonce);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numThreads:");
      sb.append(this.numThreads);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mineBlockInRange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlockInRange_argsStandardScheme getScheme() {
        return new mineBlockInRange_argsStandardScheme();
      }
    }

    private static class mineBlockInRange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mineBlockInRange_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, mineBlockInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_BLOCK_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prevBlockHash = iprot.readBinary();
                struct.setPrevBlockHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MERKLE_ROOT_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merkleRootHash = iprot.readBinary();
                struct.setMerkleRootHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TARGET
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.target = iprot.readI64();
                struct.setTargetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_NONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startNonce = iprot.readI64();
                struct.setStartNonceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // END_NONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endNonce = iprot.readI64();
                struct.setEndNonceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // NUM_THREADS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numThreads = iprot.readI32();
                struct.setNumThreadsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, mineBlockInRange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.prevBlockHash != null) {
          oprot.writeFieldBegin(PREV_BLOCK_HASH_FIELD_DESC);
          oprot.writeBinary(struct.prevBlockHash);
          oprot.writeFieldEnd();
        }
        if (struct.merkleRootHash != null) {
          oprot.writeFieldBegin(MERKLE_ROOT_HASH_FIELD_DESC);
          oprot.writeBinary(struct.merkleRootHash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI64(struct.target);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_NONCE_FIELD_DESC);
        oprot.writeI64(struct.startNonce);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_NONCE_FIELD_DESC);
        oprot.writeI64(struct.endNonce);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_THREADS_FIELD_DESC);
        oprot.writeI32(struct.numThreads);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mineBlockInRange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlockInRange_argsTupleScheme getScheme() {
        return new mineBlockInRange_argsTupleScheme();
      }
    }

    private static class mineBlockInRange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mineBlockInRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mineBlockInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVersion()) {
          optionals.set(0);
        }
        if (struct.isSetPrevBlockHash()) {
          optionals.set(1);
        }
        if (struct.isSetMerkleRootHash()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        if (struct.isSetTarget()) {
          optionals.set(4);
        }
        if (struct.isSetStartNonce()) {
          optionals.set(5);
        }
        if (struct.isSetEndNonce()) {
          optionals.set(6);
        }
        if (struct.isSetNumThreads()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetPrevBlockHash()) {
          oprot.writeBinary(struct.prevBlockHash);
        }
        if (struct.isSetMerkleRootHash()) {
          oprot.writeBinary(struct.merkleRootHash);
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
        if (struct.isSetTarget()) {
          oprot.writeI64(struct.target);
        }
        if (struct.isSetStartNonce()) {
          oprot.writeI64(struct.startNonce);
        }
        if (struct.isSetEndNonce()) {
          oprot.writeI64(struct.endNonce);
        }
        if (struct.isSetNumThreads()) {
          oprot.writeI32(struct.numThreads);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mineBlockInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prevBlockHash = iprot.readBinary();
          struct.setPrevBlockHashIsSet(true);
        }
        if (incoming.get(2)) {
          struct.merkleRootHash = iprot.readBinary();
          struct.setMerkleRootHashIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.target = iprot.readI64();
          struct.setTargetIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startNonce = iprot.readI64();
          struct.setStartNonceIsSet(true);
        }
        if (incoming.get(6)) {
          struct.endNonce = iprot.readI64();
          struct.setEndNonceIsSet(true);
        }
        if (incoming.get(7)) {
          struct.numThreads = iprot.readI32();
          struct.setNumThreadsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class mineBlockInRange_result implements org.apache.thrift.TBase<mineBlockInRange_result, mineBlockInRange_result._Fields>, java.io.Serializable, Cloneable, Comparable<mineBlockInRange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mineBlockInRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mineBlockInRange_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mineBlockInRange_resultTupleSchemeFactory();

    public long success; // required
    public @org.apache.thrift.annotation.Nullable IllegalArgument e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IllegalArgument.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mineBlockInRange_result.class, metaDataMap);
    }

    public mineBlockInRange_result() {
    }

    public mineBlockInRange_result(
      long success,
      IllegalArgument e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mineBlockInRange_result(mineBlockInRange_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new IllegalArgument(other.e);
      }
    }

    @Override
    public mineBlockInRange_result deepCopy() {
      return new mineBlockInRange_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public mineBlockInRange_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public IllegalArgument getE() {
      return this.e;
    }

    public mineBlockInRange_result setE(@org.apache.thrift.annotation.Nullable IllegalArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((IllegalArgument)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mineBlockInRange_result)
        return this.equals((mineBlockInRange_result)that);
      return false;
    }

    public boolean equals(mineBlockInRange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mineBlockInRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mineBlockInRange_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mineBlockInRange_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlockInRange_resultStandardScheme getScheme() {
        return new mineBlockInRange_resultStandardScheme();
      }
    }

    private static class mineBlockInRange_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mineBlockInRange_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, mineBlockInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new IllegalArgument();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, mineBlockInRange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mineBlockInRange_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public mineBlockInRange_resultTupleScheme getScheme() {
        return new mineBlockInRange_resultTupleScheme();
      }
    }

    private static class mineBlockInRange_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mineBlockInRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mineBlockInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mineBlockInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new IllegalArgument();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
